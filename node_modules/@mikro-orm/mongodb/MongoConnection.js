"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoConnection = void 0;
const mongodb_1 = require("mongodb");
const bson_1 = require("bson");
const util_1 = require("util");
const core_1 = require("@mikro-orm/core");
class MongoConnection extends core_1.Connection {
    constructor(config, options, type = 'write') {
        super(config, options, type);
        this.connected = false;
        bson_1.ObjectId.prototype[util_1.inspect.custom] = function () {
            return `ObjectId('${this.toHexString()}')`;
        };
        Date.prototype[util_1.inspect.custom] = function () {
            return `ISODate('${this.toISOString()}')`;
        };
    }
    async connect() {
        this.client = new mongodb_1.MongoClient(this.config.getClientUrl(), this.getConnectionOptions());
        await this.client.connect();
        this.db = this.client.db(this.config.get('dbName'));
        this.connected = true;
    }
    async close(force) {
        await this.client?.close(!!force);
        this.connected = false;
    }
    async isConnected() {
        return this.connected;
    }
    getCollection(name) {
        return this.db.collection(this.getCollectionName(name));
    }
    async createCollection(name) {
        return this.db.createCollection(this.getCollectionName(name));
    }
    async listCollections() {
        const collections = await this.db.listCollections({}, { nameOnly: true }).toArray();
        return collections.map(c => c.name);
    }
    async dropCollection(name) {
        return this.db.dropCollection(this.getCollectionName(name));
    }
    getDefaultClientUrl() {
        return 'mongodb://127.0.0.1:27017';
    }
    getConnectionOptions() {
        const ret = {};
        const pool = this.config.get('pool');
        const username = this.config.get('user');
        const password = this.config.get('password');
        if (this.config.get('host')) {
            throw new core_1.ValidationError('Mongo driver does not support `host` options, use `clientUrl` instead!');
        }
        if (username && password) {
            ret.auth = { username, password };
        }
        if (pool.min) {
            ret.minPoolSize = pool.min;
        }
        if (pool.max) {
            ret.maxPoolSize = pool.max;
        }
        return core_1.Utils.merge(ret, this.config.get('driverOptions'));
    }
    getClientUrl() {
        const options = this.getConnectionOptions();
        const clientUrl = this.config.getClientUrl(true);
        const match = clientUrl.match(/^(\w+):\/\/((.*@.+)|.+)$/);
        return match ? `${match[1]}://${options.auth ? options.auth.username + ':*****@' : ''}${match[2]}` : clientUrl;
    }
    getDb() {
        return this.db;
    }
    async execute(query) {
        throw new Error(`${this.constructor.name} does not support generic execute method`);
    }
    async find(collection, where, orderBy, limit, offset, fields, ctx) {
        collection = this.getCollectionName(collection);
        const options = { session: ctx };
        if (fields) {
            options.projection = fields.reduce((o, k) => ({ ...o, [k]: 1 }), {});
        }
        const resultSet = this.getCollection(collection).find(where, options);
        let query = `db.getCollection('${collection}').find(${this.logObject(where)}, ${this.logObject(options)})`;
        orderBy = core_1.Utils.asArray(orderBy);
        if (Array.isArray(orderBy) && orderBy.length > 0) {
            const orderByTuples = [];
            orderBy.forEach(o => {
                Object.keys(o).forEach(k => {
                    const direction = o[k];
                    orderByTuples.push([k, core_1.Utils.isString(direction) ? direction.toUpperCase() === core_1.QueryOrder.ASC ? 1 : -1 : direction]);
                });
            });
            if (orderByTuples.length > 0) {
                query += `.sort(${this.logObject(orderByTuples)})`;
                // @ts-expect-error ??
                resultSet.sort(orderByTuples);
            }
        }
        if (limit !== undefined) {
            query += `.limit(${limit})`;
            resultSet.limit(limit);
        }
        if (offset !== undefined) {
            query += `.skip(${offset})`;
            resultSet.skip(offset);
        }
        const now = Date.now();
        const res = await resultSet.toArray();
        this.logQuery(`${query}.toArray();`, { took: Date.now() - now });
        return res;
    }
    async insertOne(collection, data, ctx) {
        return this.runQuery('insertOne', collection, data, undefined, ctx);
    }
    async insertMany(collection, data, ctx) {
        return this.runQuery('insertMany', collection, data, undefined, ctx);
    }
    async updateMany(collection, where, data, ctx) {
        return this.runQuery('updateMany', collection, data, where, ctx);
    }
    async bulkUpdateMany(collection, where, data, ctx) {
        return this.runQuery('bulkUpdateMany', collection, data, where, ctx);
    }
    async deleteMany(collection, where, ctx) {
        return this.runQuery('deleteMany', collection, undefined, where, ctx);
    }
    async aggregate(collection, pipeline, ctx) {
        collection = this.getCollectionName(collection);
        const options = { session: ctx };
        const query = `db.getCollection('${collection}').aggregate(${this.logObject(pipeline)}, ${this.logObject(options)}).toArray();`;
        const now = Date.now();
        const res = this.getCollection(collection).aggregate(pipeline, options).toArray();
        this.logQuery(query, { took: Date.now() - now });
        return res;
    }
    async countDocuments(collection, where, ctx) {
        return this.runQuery('countDocuments', collection, undefined, where, ctx);
    }
    async transactional(cb, options = {}) {
        const session = await this.begin(options);
        try {
            const ret = await cb(session);
            await this.commit(session, options.eventBroadcaster);
            return ret;
        }
        catch (error) {
            await this.rollback(session, options.eventBroadcaster);
            throw error;
        }
        finally {
            await session.endSession();
        }
    }
    async begin(options = {}) {
        if (!options.ctx) {
            await options.eventBroadcaster?.dispatchEvent(core_1.EventType.beforeTransactionStart);
        }
        const session = options.ctx || this.client.startSession();
        session.startTransaction();
        this.logQuery('db.begin();');
        await options.eventBroadcaster?.dispatchEvent(core_1.EventType.afterTransactionStart, session);
        return session;
    }
    async commit(ctx, eventBroadcaster) {
        await eventBroadcaster?.dispatchEvent(core_1.EventType.beforeTransactionCommit, ctx);
        await ctx.commitTransaction();
        this.logQuery('db.commit();');
        await eventBroadcaster?.dispatchEvent(core_1.EventType.afterTransactionCommit, ctx);
    }
    async rollback(ctx, eventBroadcaster) {
        await eventBroadcaster?.dispatchEvent(core_1.EventType.beforeTransactionRollback, ctx);
        await ctx.abortTransaction();
        this.logQuery('db.rollback();');
        await eventBroadcaster?.dispatchEvent(core_1.EventType.afterTransactionRollback, ctx);
    }
    async runQuery(method, collection, data, where, ctx) {
        collection = this.getCollectionName(collection);
        const logger = this.config.getLogger();
        const options = { session: ctx };
        const now = Date.now();
        let res;
        let query;
        const log = (msg) => logger.isEnabled('query') ? msg() : '';
        switch (method) {
            case 'insertOne':
                Object.keys(data).filter(k => typeof data[k] === 'undefined').forEach(k => delete data[k]);
                query = log(() => `db.getCollection('${collection}').insertOne(${this.logObject(data)}, ${this.logObject(options)});`);
                res = await this.getCollection(collection).insertOne(data, options);
                break;
            case 'insertMany':
                data.forEach(data => Object.keys(data).filter(k => typeof data[k] === 'undefined').forEach(k => delete data[k]));
                query = log(() => `db.getCollection('${collection}').insertMany(${this.logObject(data)}, ${this.logObject(options)});`);
                res = await this.getCollection(collection).insertMany(data, options);
                break;
            case 'updateMany': {
                const payload = Object.keys(data).some(k => k.startsWith('$')) ? data : this.createUpdatePayload(data);
                query = log(() => `db.getCollection('${collection}').updateMany(${this.logObject(where)}, ${this.logObject(payload)}, ${this.logObject(options)});`);
                res = await this.getCollection(collection).updateMany(where, payload, options);
                break;
            }
            case 'bulkUpdateMany': {
                query = log(() => `bulk = db.getCollection('${collection}').initializeUnorderedBulkOp(${this.logObject(options)});\n`);
                const bulk = this.getCollection(collection).initializeUnorderedBulkOp(options);
                data.forEach((row, idx) => {
                    const cond = { _id: where[idx] };
                    const doc = this.createUpdatePayload(row);
                    query += log(() => `bulk.find(${this.logObject(cond)}).update(${this.logObject(doc)});\n`);
                    bulk.find(cond).update(doc);
                });
                query += log(() => `bulk.execute()`);
                res = await bulk.execute();
                break;
            }
            case 'deleteMany':
            case 'countDocuments':
                query = log(() => `db.getCollection('${collection}').${method}(${this.logObject(where)}, ${this.logObject(options)});`);
                res = await this.getCollection(collection)[method](where, options);
                break;
        }
        this.logQuery(query, { took: Date.now() - now });
        if (method === 'countDocuments') {
            return res;
        }
        return this.transformResult(res);
    }
    createUpdatePayload(row) {
        const doc = { $set: row };
        const keys = Object.keys(row);
        const $unset = {};
        keys.filter(k => typeof row[k] === 'undefined').forEach(k => {
            $unset[k] = '';
            delete row[k];
        });
        if (core_1.Utils.hasObjectKeys($unset)) {
            doc.$unset = $unset;
            if (!core_1.Utils.hasObjectKeys(doc.$set)) {
                delete doc.$set;
            }
        }
        return doc;
    }
    transformResult(res) {
        return {
            affectedRows: res.modifiedCount || res.deletedCount || res.insertedCount || 0,
            insertId: res.insertedId ?? res.insertedIds?.[0],
            insertedIds: res.insertedIds ? Object.values(res.insertedIds) : undefined,
        };
    }
    getCollectionName(name) {
        name = core_1.Utils.className(name);
        const meta = this.metadata.find(name);
        return meta ? meta.collection : name;
    }
    logObject(o) {
        if (o.session) {
            o = { ...o, session: `[ClientSession]` };
        }
        return (0, util_1.inspect)(o, { depth: 5, compact: true, breakLength: 300 });
    }
}
exports.MongoConnection = MongoConnection;
